---
import Layout from '../layouts/Layout.astro';
import LinkButton from '../components/LinkButton.astro';

import { getHighlighter } from 'shiki';

import cornLanguage from "../../cornLanguage.js";
import Feature from "../components/Feature.astro";

const sampleCodeUrl = 'https://raw.githubusercontent.com/JakeStanger/corn/master/assets/inputs/readme_example.corn';
const sampleCode = await fetch(sampleCodeUrl).then(r => r.text());
const highlighter = await getHighlighter({
    theme: 'github-dark',
    langs: [cornLanguage]
});

const sampleCodeHtml = highlighter.codeToHtml(sampleCode, {lang: 'corn'});
---

<Layout title="Corn | A simple and pain-free configuration language">
    <div class="grid">
        <div class="header-background" />

        <h1 class="title">{"{Corn}"}</h1>
        <h2 class="tagline">A simple and pain-free configuration language.</h2>

        <main class="intro-text">
            <p>
                Corn has been designed using inspiration from JSON and Nix to produce a language that's easy and
                intuitive
                to write, good for config files, and has a feature-set small enough you can learn it in minutes. It was
                born
                out of the following frustrations:
            </p>
            <ul>
                <li>JSON is not a config language, despite how often people use it as one.</li>
                <li>TOML is good for flat structures but gets ugly quickly with deeper objects.</li>
                <li>YAML is far too complex and its whitespace rules make it error-prone.</li>
                <li>Nix is a full-sized language and not easy to integrate.</li>
            </ul>
            <div>
                <LinkButton text="Get started" href="user-guide" />
                <LinkButton text="Full specification" href="spec" />
            </div>
        </main>

        <div class="code-sample">
            <code set:html={sampleCodeHtml} />
        </div>
    </div>

    <div class="features">
        <Feature title="No obscure types">
            <p>
                Corn does away with special use-case data types, sticking only to the same small set available in JSON.
            </p>
            <p>This simplifies parsing, makes your configuration <b>versatile</b> and <b>avoids lock-in</b>.</p>
        </Feature>

        <Feature title="One way to write Corn">
            <p>
                Each data type and feature has a <b>single, simple, syntax</b> that is valid, leaving no room for ambiguity.
            </p>
            <p>
                The syntax is <b>plain and predictable</b>, borrowing from existing well-established languages.
            </p>
        </Feature>

        <Feature title="Optimised for reading and writing">
            <p>
                Corn is designed to be read and written by humans.
                Use <b>key-chaining</b> to create deeply nested objects instantly,
                and <b>inputs</b> with <b>merging</b> to cut down on repetition.
            </p>
            <p>
                Equally, the feature set has been kept <b>purposefully minimal</b>.
                This makes it easy to learn and get going within minutes.
            </p>
        </Feature>
    </div>

</Layout>

<style>
    .grid {
        display: grid;
        grid-template-columns: 2fr 1.55fr;
    }

    .header-background {
        grid-column: 1 / 3;
        grid-row: 1 / 3;

        background-color: var(--color-primary);

        -webkit-clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
        clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    }

    .title {
        grid-column: 1;
        grid-row: 1;
        z-index: 1;
        padding-inline: 70px;
        padding-block-start: 70px;

        color: white;
        font-size: clamp(40px, 10vw, 8rem);
        font-weight: 300;
        letter-spacing: 1.2rem;
        margin-block: 0;
    }

    .tagline {
        grid-column: 1;
        grid-row: 2;
        z-index: 1;
        padding-inline: 70px;
        padding-block-end: 50px;

        color: white;
        font-size: clamp(32px, 6vw, 2.25rem);
        font-weight: 300;
    }

    .intro-text {
        padding: 20px 70px;
        font-size: 1.125rem;
        line-height: 1.8;
    }

    .code-sample {
        grid-row: 2 / 4;
        grid-column: 2;
        z-index: 1;
        margin-inline: 20px;

        background-color: var(--color-dark);
        color: white;
        padding: 1em;
        border-radius: 3px;
        border: 1px solid white;
        max-width: 800px;
    }

    .code-sample code {
        white-space: pre-wrap;
    }

    .features {
        display: flex;
        justify-content: space-around;
        flex-wrap: wrap;
        gap: 2em;
        margin-block: 3em;
        margin-inline: 70px;
    }

    @media screen and (max-width: 1200px) {
        .title, .tagline {
            grid-column: 1 / 3;
        }

        .intro-text {
            grid-row: unset;
            grid-column: 1 / 3;
        }

        .code-sample {
            grid-row: unset;
            grid-column: 1 / 3;
            max-width: unset;
        }
    }

    @media screen and (max-width: 600px) {
        .header-background {
            -webkit-clip-path: polygon(0 0, 100% 0, 100% 90%, 0 100%);
            clip-path: polygon(0 0, 100% 0, 100% 90%, 0 100%);
        }

        .title, .tagline, .intro-text {
            padding-inline: 35px;
        }
    }
</style>

<style is:global>
    .github-dark {
        background-color: #2d2d2d !important;
    }
</style>